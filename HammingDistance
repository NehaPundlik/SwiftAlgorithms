Problem- Hamming Distance
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.

Solution-

class Solution {
     func hammingDistance(_ x: Int, _ y: Int) -> Int {
            let finalInt = x^y
            let finalString = String(finalInt, radix: 2)
            var bitCount = 0
            let cnt = finalString.characters.count
            for index in 0..<cnt {
                if finalString[index] == "1" {
                    bitCount+=1
                }
            }
         return bitCount
        }
}

extension String {
    subscript(i: Int) -> Character {
        return self[index(startIndex, offsetBy: i)]
    }
}
